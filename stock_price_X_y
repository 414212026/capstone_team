
import numpy as np
import yfinance as yf
import pandas as pd


def fetch_and_process_stock_data(symbol, start, end):
    df = yf.download(symbol, start=start, end=end)
    df.index = pd.to_datetime(df.index)
    df.index = df.index.strftime('%Y-%m-%d')
    df['Adj_Closed_price'] = df[('Adj Close', symbol)]
    df['Closed_price'] = df[('Close', symbol)]
    df['Open_price'] = df[('Open', symbol)]
    df['Log_Return'] =  np.log(df[('Close', symbol)] / df[('Open', symbol)])
    df_result = df[['Adj_Closed_price', 'Log_Return','Open_price','Closed_price']].copy()
    df_result = df_result.reset_index().rename(columns={'index': 'Date'})
    return df_result

# Example usage
symbol = "COF"
start = "2008-01-01"
end = "2024-10-18"
df_result = fetch_and_process_stock_data(symbol, start, end)
print(df_result.tail())

log_returns = df_result[['Log_Return']].values

# log_returns_quantiles = df_result['Log_Return'][833:].quantile([0.1,0.25, 0.5, 0.75,0.9])
# print(log_returns_quantiles)

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
scaled_log_returns = scaler.fit_transform(log_returns)

def create_sequences(data, look_back=60):
    """
    This function takes in a dataset (like log returns) and splits it into sequences of a fixed length.
    These sequences will be used as inputs to the LSTM model, with the goal of predicting the next day's value.

    Parameters:
    - data: The input data (e.g., scaled log returns) that we want to split into sequences.
    - look_back: The number of previous days (or time steps) we want to use to predict the next value.
                In this case, we're using 60 days of past data to make each prediction.

    Returns:
    - X: A list of sequences, where each sequence contains 'look_back' days of data.
    - y: A list of target values, where each target is the value we want to predict,
         which is the day immediately following each sequence in X.
    """
    X, y = [], []
    for i in range(look_back, len(data)):
        # Create a sequence of 'look_back' days by taking data points from (i - look_back) to (i - 1)
        # This sequence represents the past 60 days for each step in the dataset
        X.append(data[i - look_back:i, 0])
        # The target value (y) is the next day's value, located at index 'i' in the data
        # This is the value we want our model to learn to predict based on the previous 60 days
        y.append(data[i, 0])
    return np.array(X), np.array(y)

# Define look-back period and create sequences
look_back = 60
X, y = create_sequences(scaled_log_returns, look_back)


# Reshape X to be compatible with LSTM input (samples, time steps, features)
X = np.reshape(X, (X.shape[0], X.shape[1], 1))
